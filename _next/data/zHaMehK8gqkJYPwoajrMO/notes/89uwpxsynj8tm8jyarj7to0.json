{"pageProps":{"note":{"id":"89uwpxsynj8tm8jyarj7to0","title":"COO 101","desc":"","updated":1665498202671,"created":1662933874608,"custom":{},"fname":"B1.COOSATR.COO101","type":"note","vault":{"fsPath":"vault"},"contentHash":"6d5c6b8fe2b6062123532079d06292a8","links":[{"from":{"fname":"B1.COOSATR","id":"tpyb41n9fi7ze4cw7z2cuxo","vaultName":"vault"},"type":"backlink","position":{"start":{"line":16,"column":3,"offset":326},"end":{"line":16,"column":34,"offset":357},"indent":[]},"value":"B1.COOSATR.COO101"}],"anchors":{"hello-world":{"type":"header","text":"Hello World","value":"hello-world","line":28,"column":0,"depth":2},"hello-world-c":{"type":"header","text":"Hello World: C++","value":"hello-world-c","line":32,"column":0,"depth":3},"hello-world-python":{"type":"header","text":"Hello World: Python","value":"hello-world-python","line":55,"column":0,"depth":3},"data-types":{"type":"header","text":"Data Types","value":"data-types","line":72,"column":0,"depth":3},"counter-flow":{"type":"header","text":"Counter Flow","value":"counter-flow","line":109,"column":0,"depth":2},"functions":{"type":"header","text":"Functions","value":"functions","line":113,"column":0,"depth":3},"conditions-c":{"type":"header","text":"Conditions: C++","value":"conditions-c","line":132,"column":0,"depth":3},"conditions-python":{"type":"header","text":"Conditions: Python","value":"conditions-python","line":136,"column":0,"depth":3},"loops-while":{"type":"header","text":"Loops: While","value":"loops-while","line":140,"column":0,"depth":3},"c":{"type":"header","text":"C++","value":"c","line":144,"column":0,"depth":4},"python":{"type":"header","text":"Python","value":"python","line":156,"column":0,"depth":4},"walrus":{"type":"header","text":"Walrus","value":"walrus","line":166,"column":0,"depth":4},"loops-break-c":{"type":"header","text":"Loops: Break C++","value":"loops-break-c","line":178,"column":0,"depth":3},"loops-break-python":{"type":"header","text":"Loops: Break Python","value":"loops-break-python","line":182,"column":0,"depth":3},"loops-forbreak-c":{"type":"header","text":"Loops: for/break C++","value":"loops-forbreak-c","line":186,"column":0,"depth":3},"loops-forbreak-python":{"type":"header","text":"Loops: for/break Python","value":"loops-forbreak-python","line":192,"column":0,"depth":3},"loops-continue":{"type":"header","text":"Loops: continue","value":"loops-continue","line":196,"column":0,"depth":3},"loops-containers":{"type":"header","text":"Loops: containers","value":"loops-containers","line":204,"column":0,"depth":3},"c-1":{"type":"header","text":"C++","value":"c-1","line":214,"column":0,"depth":4},"python-1":{"type":"header","text":"Python","value":"python-1","line":229,"column":0,"depth":4},"objects":{"type":"header","text":"Objects","value":"objects","line":238,"column":0,"depth":2},"c-2":{"type":"header","text":"C++","value":"c-2","line":242,"column":0,"depth":3},"python-2":{"type":"header","text":"Python","value":"python-2","line":273,"column":0,"depth":3},"inheritance-c":{"type":"header","text":"Inheritance: C++","value":"inheritance-c","line":297,"column":0,"depth":3},"inheritance-python":{"type":"header","text":"Inheritance: Python","value":"inheritance-python","line":317,"column":0,"depth":3}},"children":[],"parent":"tpyb41n9fi7ze4cw7z2cuxo","data":{}},"body":"<h1 id=\"coo-101\">COO 101<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#coo-101\"></a></h1>\n<blockquote>\n<p><strong>Avertissement:</strong>\nCette page peut contenir des fautes ! Envoyez-moi un message sur <a href=\"https://matrix.to/#/#UT3-AURO-M2-2223-Request:matrix.org\"><code>#UT3-AURO-M2-2223-Request:matrix.org</code></a> si vous en trouvez, merci.</p>\n</blockquote>\n<blockquote>\n<p>Cours donné par G. Saurel</p>\n</blockquote>\n<p>Support de cours:</p>\n<ul>\n<li><a href=\"https://homepages.laas.fr/gsaurel/talks/conception-orientee-objet-101.pdf\">conception-orientee-objet-101.pdf</a></li>\n<li><a href=\"https://raw.githubusercontent.com/TunnARK/UT3-AURO-2223-S10-Dendron/main/vault/assets/COOSTART.NotesGEA.20220831.pdf\">COOSTART.NotesGEA.20220831.pdf</a></li>\n</ul>\n<hr>\n<blockquote>\n<p>Notes du 2022/08/31 - Start</p>\n</blockquote>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.01.png\"></p>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.02.png\"></p>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.03.png\"></p>\n<h2 id=\"hello-world\">Hello World<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hello-world\"></a></h2>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.04.png\"></p>\n<h3 id=\"hello-world-c\">Hello World: C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hello-world-c\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.05.png\"></p>\n<pre><code>#include &#x3C;iostream>\nauto main() -> int {\nstd::cout &#x3C;&#x3C; \"hello\\n\";\nreturn 0;\n}\n</code></pre>\n<ul>\n<li>\n<p>a.out:</p>\n<ul>\n<li>fichier binaire directement compréhensible par l'ordinateur</li>\n</ul>\n</li>\n<li>\n<p><code>g++ hello.cpp &#x26;&#x26; ./a.out</code></p>\n<ul>\n<li>ecriture shell -> langague unix</li>\n<li>commande de compilation</li>\n<li>puis excecute le fichier a.out</li>\n</ul>\n</li>\n<li>\n<p><code>true &#x26;&#x26; echo \"Hello\"</code> -> affiche</p>\n</li>\n<li>\n<p><code>false &#x26;&#x26; echo \"Hello\"</code> -> n'affiche pas</p>\n</li>\n</ul>\n<h3 id=\"hello-world-python\">Hello World: Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hello-world-python\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.06.png\"></p>\n<pre><code>#!/usr/bin/env python\n\nif __name__ == \"__main__\":\nprint(\"hello\")\n</code></pre>\n<ul>\n<li><code>#!</code> shybang indique à l'OS le type de fichier\n<ul>\n<li>comportement différent selon l'OS</li>\n</ul>\n</li>\n</ul>\n<pre><code>chmod +x hello.py &#x26;&#x26; ./hello.py\n</code></pre>\n<h3 id=\"data-types\">Data Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-types\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.07.png\"></p>\n<ul>\n<li>\n<p>compilateur choisit pour nous le type</p>\n</li>\n<li>\n<p><code>auto ga{3}; // int</code></p>\n<ul>\n<li>prends 4 places dans la mémoire</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><code>auto bu{3.14}; // double</code>\n<ul>\n<li>prends 8 places dans la mémoire</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><code>auto to{\"tau\"};</code> devient automatiquement <code>const auto *const zo{\"tau\"}; // const char *const</code>\n<ul>\n<li>magnière compliquée de corriger l'input </li>\n<li><code>const</code> empêche toute modification de la variable (sinon retourne variable en lecture seule donc pas d'affectation)</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><code>std::string meu{\"pi\"};</code>\n<ul>\n<li>manière plus propre/optimale pour créer un string</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>Attention</strong>: ne pas optimiser avant d'avoir un programme lisible</li>\n</ul>\n<ul>\n<li>concepts similaire en Python</li>\n</ul>\n<pre><code>ga: int = 3\nbu: float = 3.14\nzo: str = \"pi\"\n</code></pre>\n<blockquote>\n<p>Python et C++ sont des langages <strong>fortement typés</strong> (ecriture restrictive)</p>\n</blockquote>\n<h2 id=\"counter-flow\">Counter Flow<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#counter-flow\"></a></h2>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.08.png\"></p>\n<h3 id=\"functions\">Functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.09.png\"></p>\n<p><code>auto add(int first, int second) -> int {</code></p>\n<ul>\n<li>auto pour choisir le type de la fonction</li>\n<li>add nom de la fct</li>\n<li>deux parametres</li>\n<li>retourne un int</li>\n</ul>\n<p><code>return first + second;</code></p>\n<ul>\n<li>réalise la somme</li>\n</ul>\n<p><code>}</code></p>\n<blockquote>\n<p>L'execution est linéaire mais le compilateur lui regarde le code par unité de compilation (de façon plus globale que linéaire)</p>\n</blockquote>\n<h3 id=\"conditions-c\">Conditions: C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conditions-c\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.10.png\"></p>\n<h3 id=\"conditions-python\">Conditions: Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conditions-python\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.11.png\"></p>\n<h3 id=\"loops-while\">Loops: While<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-while\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.12.png\"></p>\n<h4 id=\"c\">C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c\"></a></h4>\n<pre><code>auto user_input{0};\nwhile (user_input != 42) {\nstd::cout &#x3C;&#x3C; \"guess: \";\nstd::cin >> user_input;\n}\n</code></pre>\n<p>TODO: Rajouter un indice chaud/froid à l'utilisateur</p>\n<h4 id=\"python\">Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#python\"></a></h4>\n<pre><code>user_input: int = 0\nwhile user_input != 42:\nuser_input = int(input(\"guess: \"))\n</code></pre>\n<ul>\n<li><code>int(input(...))</code> sur python il faut lui indiquer le type</li>\n</ul>\n<h4 id=\"walrus\">Walrus<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#walrus\"></a></h4>\n<pre><code>while (user_input := int(input(\"guess: \"))) != 42:\nprint(\"it's not\", user_input)\n</code></pre>\n<ul>\n<li><code>:=</code> symbol/technique <em>walrus</em></li>\n</ul>\n<blockquote>\n<p>Contrairement au C++, Python \"<em>impose</em>\" une manière de coder selon que cela soit plus convenable pour la communauté donc Walrus n'est pas recommandé puisqu'il est plus difficile à lire</p>\n</blockquote>\n<h3 id=\"loops-break-c\">Loops: Break C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-break-c\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.13.png\"></p>\n<h3 id=\"loops-break-python\">Loops: Break Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-break-python\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.14.png\"></p>\n<h3 id=\"loops-forbreak-c\">Loops: for/break C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-forbreak-c\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.15.png\"></p>\n<blockquote>\n<p>pas obliger d'avoir un break dans une boucle for</p>\n</blockquote>\n<h3 id=\"loops-forbreak-python\">Loops: for/break Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-forbreak-python\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.16.png\"></p>\n<h3 id=\"loops-continue\">Loops: continue<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-continue\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.17.png\"></p>\n<blockquote>\n<p><code>continue</code> fait retourner au début de la boucle et ne s'applique que sur la boucle la plus proche</p>\n</blockquote>\n<blockquote>\n<p>CPU ne sait pas faire de boucle mais fait des <strong>saut conditionnel</strong></p>\n</blockquote>\n<h3 id=\"loops-containers\">Loops: containers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-containers\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.18.png\"></p>\n<ul>\n<li>\n<p>sur C++ peu de types primitifs le reste c'est des objets</p>\n</li>\n<li>\n<p>sur python il n'y a que des objets</p>\n</li>\n<li>\n<p>containers est un type d'objet (i.e. de type vecteur)</p>\n</li>\n</ul>\n<h4 id=\"c-1\">C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-1\"></a></h4>\n<p><code>using Colors = std::vector&#x3C;std::string>;</code></p>\n<p><code>Colors colors{\"orange\", \"blue\", \"pink\"};</code></p>\n<ul>\n<li>ici on ne peut pas utiliser <code>auto</code></li>\n</ul>\n<p><code>for (const auto &#x26;color: colors) {</code></p>\n<ul>\n<li>ici le compilateur propose de rajouter <code>&#x26;</code> à colors</li>\n<li>on définit une variable <code>color</code> comme indice</li>\n</ul>\n<p><code>std::cout &#x3C;&#x3C; color &#x3C;&#x3C; \"\\n\";</code></p>\n<p><code>}</code></p>\n<h4 id=\"python-1\">Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#python-1\"></a></h4>\n<pre><code>colors = [\"orange\", \"blue\", \"pink\"]\nfor color in colors:\nprint(color)\n</code></pre>\n<blockquote>\n<p>plus facile qu'en C++</p>\n</blockquote>\n<h2 id=\"objects\">Objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#objects\"></a></h2>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.19.png\"></p>\n<h3 id=\"c-2\">C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-2\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.20.png\"></p>\n<pre><code>class Robot {\n  public:\n    auto work() { battery -= 5; }\n    \\\\ methode pour changer le niveau de la batterie\n    auto get_battery() const -> int { return battery; }\n    \\\\ methode pour donner la valeur de la batterie a d autre partie du code\n    \\\\ methode avec effet de bord constant elle ne modifie pas le contenu de la classe\n  protected:\n    int battery{100}; \\\\ initialise la batterie a 100\n};\n\nauto main() -> int {\n  auto robot = Robot{};\n  std::cout &#x3C;&#x3C; robot.get_battery() &#x3C;&#x3C; \"%remaining\\n\";\n  robot.work();\n  std::cout &#x3C;&#x3C; robot.get_battery() &#x3C;&#x3C; \"%remaining\\n\";\n  return 0;\n}\n</code></pre>\n<ul>\n<li>\n<p>L'objet \"correspond\" à la variable et la méthode \"correspond\" à la fonction</p>\n</li>\n<li>\n<p>On ne peut pas faire une méthode charge avec une entete contenant <code>const</code> puisqu'on veut modifier la valeur d'un attribut de la classe mais const nous en empêche.</p>\n<p>exemple: <code>auto charge(int new_value) const -> {battery +=1:}</code> ce code retournera une erreur</p>\n</li>\n</ul>\n<h3 id=\"python-2\">Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#python-2\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.21.png\"></p>\n<pre><code>class Robot:\n  battery = 100\n\n  def work(self):\n    self.battery -= 5\n  def get_battery(self) -> int:\n    return self.battery\n\nif __name__ == \"__main__\":\n  robot = Robot()\n  print(robot.get_battery(), \"% remaining\")\n  robot.work()\n  print(robot.get_battery(), \"% remaining\")\n</code></pre>\n<ul>\n<li>\n<p>Sur Python il n'existe pas de type <code>const</code> du coup l'utilisateur peut toujours modifier donc sur python il n'y a pas de protection des variables</p>\n</li>\n<li>\n<p><code>robot = Robot()</code> instancie une variable robot de type Robot</p>\n</li>\n</ul>\n<h3 id=\"inheritance-c\">Inheritance: C++<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#inheritance-c\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.22.png\"></p>\n<pre><code>class LeggedRobot : public Robot {\n  public:\n    auto walk() { battery -= 10; }\n};\n\nauto main() -> int {\n  auto robot = LeggedRobot{};\n  std::cout &#x3C;&#x3C; robot.get_battery() &#x3C;&#x3C; \"% remaining\\n\";\n  robot.work();\n  robot.walk();\n  std::cout &#x3C;&#x3C; robot.get_battery() &#x3C;&#x3C; \"% remaining\\n\";\n  return 0;\n}\n</code></pre>\n<h3 id=\"inheritance-python\">Inheritance: Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#inheritance-python\"></a></h3>\n<p><img src=\"/UT3-AURO-2223-S10-Dendron/assets/images/COOSATR.SlideCours101.23.png\"></p>\n<pre><code>class LeggedRobot(Robot):\n  def walk(self):\n    self.battery -= 10\n\nif __name__ == \"__main__\":\n  robot = LeggedRobot()\n  print(robot.get_battery(), \"% remaining\")\n  robot.work()\n  robot.walk()\n  print(robot.get_battery(), \"% remaining\")\n</code></pre>\n<blockquote>\n<p>Notes du 2022/08/31 - End</p>\n</blockquote>\n<hr>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/UT3-AURO-2223-S10-Dendron/notes/tpyb41n9fi7ze4cw7z2cuxo\">COOSATR - Conception Orientee Objet</a></li>\n</ul>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Portail Digital du M2 AURO 2022/2023 de RKA","desc":"","updated":1669033598588,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4d5454b71088c3c74fdb20ab3ed32dab","links":[],"anchors":{"idée":{"type":"header","text":"Idée","value":"idée","line":11,"column":0,"depth":1},"liens-utiles":{"type":"header","text":"Liens utiles","value":"liens-utiles","line":17,"column":0,"depth":1},"remerciement":{"type":"header","text":"Remerciement","value":"remerciement","line":28,"column":0,"depth":1},"contact":{"type":"header","text":"Contact","value":"contact","line":36,"column":0,"depth":1}},"children":["wmc6wolqmlygiqlfcwihsso","43j78t90ywskb5ji2dl1dv6","wifhrlf5o1cm74d5nvmwtmd","g54kxj2u0t1wl4x6uo6vgbt","90wm5tdnz2dnqs3098ttvor"],"parent":null,"data":{},"body":"\n> **Avertissement:**\nCette page peut contenir des fautes ! Envoyez-moi un message sur [`#UT3-AURO-M2-2223-Request:matrix.org`](https://matrix.to/#/#UT3-AURO-M2-2223-Request:matrix.org) si vous en trouvez, merci.\n\n# Idée\n\nCe projet a pour but de regrouper mes notes de cours en utilisant les outils offerts par [Dendron](dendron.so) pour structurer et hiérarchiser l'information.\n\nDe cette façon, ce portail devient un \"one-stop-shop\" pour accéder et/ou retrouver les connaissances acquises durant le master.\n\n# Liens utiles\n\nPour plus d'informations:\n- [Lien officiel du Master AURO de l'Université Paul Sabatier](https://www.univ-tlse3.fr/master-parcours-automatique-et-robotique-auro)\n- [Lien vers la page moodle des cours](https://moodle.univ-tlse3.fr/course/index.php?categoryid=1269)\n- [Dendron Official Website](dendron.so)\n- [Dendron Wiki](https://wiki.dendron.so/)\n- [Dendron's Discord](https://discord.com/invite/xrKTUStHNZ)\n\n\n\n# Remerciement\n\nUn grand merci à GEA pour avoir mis à disposition les scans de ses notes !\n\nJe tiens aussi à remercier mes enseignants pour m'autoriser à prendre en photo les tableaux.\n\nLastly, a big thank you to everyone in [Dendron](dendron.so)'s team and the community for all their support.\n\n# Contact\n\nUn salon [Element](https://element.io/) est mis à disposition des lecteurs pour toutes questions/sugesstions ou pour faire remonter des erreurs/typos.\n\n\n[`#UT3-AURO-M2-2223-Request:matrix.org`](https://matrix.to/#/#UT3-AURO-M2-2223-Request:matrix.org)\n\n---\n\n> This website has been generated using [Dendron](dendron.so) and [GitHub Actions](https://github.com/features/actions).\n\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.95.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","enableMermaid":true,"assetsPrefix":"/UT3-AURO-2223-S10-Dendron","siteUrl":"https://tunnark.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"theme":"dark","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}